# Routes
# This file defines all application routes (Higher priority routes first)
# https://www.playframework.com/documentation/latest/ScalaRouting
# ~~~~

# An example controller showing a sample home page
GET     /                           controllers.ViteController.index()
GET     /feed                       controllers.ViteController.index()
GET     /item/*id                   controllers.ViteController.item(id: String)
GET     /ticker/feed                controllers.ViteController.index()
GET     /ticker/item/*id            controllers.ViteController.item(id: String)
GET     /api/search                 controllers.QueryController.query(q: Option[String], keywords: Option[String], supplier: List[String], categoryCode: List[String], categoryCodeExcl: List[String], start: Option[String], end: Option[String], beforeId: Option[Int], sinceId: Option[Int], hasDataFormatting: Option[Boolean])
GET     /api/keywords               controllers.QueryController.keywords(inLastHours: Option[Int], limit:Option[Int])
GET     /api/item/:id               controllers.QueryController.item(id: Int, q: Option[String])

+nocsrf # justification: we are only processing very minimal information here -- composer ID and who the article was sent by. And CSRF protections have caused multiple issues for users. But if we ever start processing more information, or loosen CORS configuration, then we should look at adding CSRF protections back.
PUT     /api/item/:id/composerId    controllers.QueryController.linkToComposer(id: Int)
GET     /api/item/:id/incopy        controllers.QueryController.redirectToIncopyImport(id: Int)

GET     /oauthCallback              controllers.AuthController.oauthCallback()

GET     /healthcheck                controllers.ManagementController.healthcheck()
GET     /_prout                     controllers.ManagementController.gitHash()


# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.ViteController.asset(file)
